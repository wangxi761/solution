{
  "data": {
    "question": {
      "title": "Hamming Distance",
      "titleSlug": "hamming-distance",
      "codeSnippets": [
        {
          "lang": "C++",
          "langSlug": "cpp",
          "code": "class Solution {\npublic:\n int hammingDistance(int x, int y) {\n \n }\n};"
        },
        {
          "lang": "Java",
          "langSlug": "java",
          "code": "class Solution {\n public int hammingDistance(int x, int y) {\n \n }\n}"
        },
        {
          "lang": "Python",
          "langSlug": "python",
          "code": "class Solution(object):\n def hammingDistance(self, x, y):\n \"\"\"\n :type x: int\n :type y: int\n :rtype: int\n \"\"\"\n "
        },
        {
          "lang": "Python3",
          "langSlug": "python3",
          "code": "class Solution:\n def hammingDistance(self, x: int, y: int) -> int:\n "
        },
        {
          "lang": "C",
          "langSlug": "c",
          "code": "\n\nint hammingDistance(int x, int y){\n\n}"
        },
        {
          "lang": "C#",
          "langSlug": "csharp",
          "code": "public class Solution {\n public int HammingDistance(int x, int y) {\n \n }\n}"
        },
        {
          "lang": "JavaScript",
          "langSlug": "javascript",
          "code": "/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n \n};"
        },
        {
          "lang": "Ruby",
          "langSlug": "ruby",
          "code": "# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef hamming_distance(x, y)\n \nend"
        },
        {
          "lang": "Swift",
          "langSlug": "swift",
          "code": "class Solution {\n func hammingDistance(_ x: Int, _ y: Int) -> Int {\n \n }\n}"
        },
        {
          "lang": "Go",
          "langSlug": "golang",
          "code": "func hammingDistance(x int, y int) int {\n \n}"
        },
        {
          "lang": "Scala",
          "langSlug": "scala",
          "code": "object Solution {\n def hammingDistance(x: Int, y: Int): Int = {\n \n }\n}"
        },
        {
          "lang": "Kotlin",
          "langSlug": "kotlin",
          "code": "class Solution {\n fun hammingDistance(x: Int, y: Int): Int {\n \n }\n}"
        },
        {
          "lang": "Rust",
          "langSlug": "rust",
          "code": "impl Solution {\n pub fn hamming_distance(x: i32, y: i32) -> i32 {\n \n }\n}"
        },
        {
          "lang": "PHP",
          "langSlug": "php",
          "code": "class Solution {\n\n /**\n * @param Integer $x\n * @param Integer $y\n * @return Integer\n */\n function hammingDistance($x, $y) {\n \n }\n}"
        },
        {
          "lang": "TypeScript",
          "langSlug": "typescript",
          "code": "function hammingDistance(x: number, y: number): number {\n\n};"
        },
        {
          "lang": "Racket",
          "langSlug": "racket",
          "code": "(define/contract (hamming-distance x y)\n (-> exact-integer? exact-integer? exact-integer?)\n\n )"
        }
      ]
    }
  }
}